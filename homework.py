import logging
import os
import sys
import time
import telebot
import requests  # type: ignore

from dotenv import load_dotenv

from exceptions import (
    MissingTokensError,
    APIRequestError,
    InvalidAPIResponseError,
    UnknownHomeworkStatusError,
)

load_dotenv()


PRACTICUM_TOKEN = os.getenv('PRACTICUM_TOKEN')
TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

RETRY_PERIOD = 600
ENDPOINT = 'https://practicum.yandex.ru/api/user_api/homework_statuses/'
HEADERS = {'Authorization': f'OAuth {PRACTICUM_TOKEN}'}


HOMEWORK_VERDICTS = {
    'approved': '–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: —Ä–µ–≤—å—é–µ—Ä—É –≤—Å—ë –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å. –£—Ä–∞!',
    'reviewing': '–†–∞–±–æ—Ç–∞ –≤–∑—è—Ç–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —Ä–µ–≤—å—é–µ—Ä–æ–º.',
    'rejected': '–†–∞–±–æ—Ç–∞ –ø—Ä–æ–≤–µ—Ä–µ–Ω–∞: —É —Ä–µ–≤—å—é–µ—Ä–∞ –µ—Å—Ç—å –∑–∞–º–µ—á–∞–Ω–∏—è.',
}

TEXT = '–ü—Ä–∏–≤–µ—Ç, —è –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç ü§ñ!'

logging.basicConfig(
    level=logging.DEBUG,
    encoding='utf-8',
    format='%(asctime)s [%(levelname)s] %(message)s',
)
logging.StreamHandler(sys.stdout)


def check_tokens():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
    tokens = ('PRACTICUM_TOKEN', 'TELEGRAM_TOKEN', 'TELEGRAM_CHAT_ID')
    missing_tokens = [name for name in tokens if not globals()[name]]
    if missing_tokens:
        missing_tokens_message = ", ".join(missing_tokens)
        message = (
            '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è: '
            f'{missing_tokens_message}.'
        )
        logging.critical(message)
        raise MissingTokensError(message)


def send_message(bot, message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram —á–∞—Ç."""
    logging.info('–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.')
    try:
        bot.send_message(chat_id=TELEGRAM_CHAT_ID, text=message)
        logging.debug('–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ "%s".', message)
    except Exception as error:
        logging.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: %s.', error)


def get_api_answer(timestamp):
    """–î–µ–ª–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API."""
    params = {'from_date': timestamp}
    logging.info('–ü—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å –∫ %s —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ %s.', ENDPOINT, params)
    try:
        response = requests.get(ENDPOINT, headers=HEADERS,
                                params=params, timeout=10)
        if response.status_code != 200:
            raise APIRequestError(f'–≠–Ω–¥–ø–æ–∏–Ω—Ç - {ENDPOINT} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.')
        logging.info('–ó–∞–ø—Ä–æ—Å –∫ %s —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ %s —É—Å–ø–µ—à–µ–Ω!', ENDPOINT, params)
        return response.json()
    except requests.RequestException as error:
        logging.error('–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ —ç–Ω–¥–ø–æ–∏–Ω—Ç—É: %s.', error)
        raise APIRequestError(
            f'–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ {ENDPOINT} c params={params}.'
        ) from error


def check_response(response):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç API –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å."""
    logging.info('–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ API –Ω–∞—á–∞–ª–∞—Å—å.')
    if not isinstance(response, dict):
        raise TypeError('–û—Ç–≤–µ—Ç API –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ª–æ–≤–∞—Ä–µ–º.')
    if 'homeworks' not in response:
        raise InvalidAPIResponseError(
            '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π –∫–ª—é—á "homeworks" –≤ –æ—Ç–≤–µ—Ç–µ API.'
        )
    if 'current_date' not in response:
        raise InvalidAPIResponseError(
            '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º—ã–π –∫–ª—é—á "current_date" –≤ –æ—Ç–≤–µ—Ç–µ API.'
        )
    homeworks = response.get('homeworks')
    if not isinstance(homeworks, list):
        raise TypeError('–ó–Ω–∞—á–µ–Ω–∏–µ –∫–ª—é—á–∞ homeworks –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º.')
    return homeworks


def parse_status(homework):
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã."""
    if 'homework_name' not in homework or 'status' not in homework:
        logging.error(
            '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ homework_name –∏–ª–∏ status –≤ –æ—Ç–≤–µ—Ç–µ API')
        raise InvalidAPIResponseError(
            '–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –∫–ª—é—á–∏ homework_name –∏–ª–∏ status –≤ –æ—Ç–≤–µ—Ç–µ API'
        )
    homework_name = homework['homework_name']
    homework_status = homework['status']
    if homework_status not in HOMEWORK_VERDICTS:
        logging.error('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã: %s',
                      homework_status)
        raise UnknownHomeworkStatusError(
            f'–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã: {homework_status}'
        )
    verdict = HOMEWORK_VERDICTS[homework_status]
    return f'–ò–∑–º–µ–Ω–∏–ª—Å—è —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã "{homework_name}". {verdict}'


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    check_tokens()

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞—Å—Å–∞ –±–æ—Ç–∞
    bot = telebot.TeleBot(token=TELEGRAM_TOKEN)
    timestamp = int(time.time())

    send_message(bot, TEXT)

    last_error_message = None

    try:
        while True:
            try:
                response = get_api_answer(timestamp)
                homeworks = check_response(response)
                if homeworks:
                    message = parse_status(homeworks[0])
                    send_message(bot, message)
                else:
                    logging.debug('–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ API.')
                timestamp = response.get('current_date', timestamp)
            except Exception as error:
                message = f'–°–±–æ–π –≤ —Ä–∞–±–æ—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã: {error}.'
                logging.error(message, exc_info=True)
                if last_error_message != message:
                    send_message(bot, message)
                    last_error_message = message
            finally:
                time.sleep(RETRY_PERIOD)
    except KeyboardInterrupt:
        logging.info('–ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.')


if __name__ == '__main__':
    main()
